generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Session {
    id        String   @id @default(cuid())
    sid       String   @unique
    data      String
    expiresAt DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// enum Role {
//     user
//     admin
// }

model GoogleUser {
    id       String  @id @default(uuid())
    email    String  @unique
    name     String?
    picture  String
    googleId String  @unique

    // role Role @default(user)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("google_user")
}

model HomePagePromotion {
    id    String @id @default(uuid())
    order Int

    profile   Profile @relation(fields: [profileId], references: [id])
    profileId String  @unique

    @@map("home_page_promotion")
}

model Address {
    id           String  @id @default(uuid())
    cep          String
    city         String
    complement   String?
    lat          Float
    lng          Float
    neighborhood String
    number       String
    street       String
    uf           String

    profile   Profile @relation(fields: [profileId], references: [id])
    profileId String  @unique

    @@map("address")
}

model Picture {
    id   String @id @default(uuid())
    key  String
    path String
    size Int
    url  String

    profile   Profile @relation(fields: [profileId], references: [id])
    profileId String  @unique

    createdAt DateTime @default(now()) @db.Date
    updatedAt DateTime @updatedAt

    @@map("picture")
}

model Category {
    id   String @id @default(uuid())
    name String @unique

    profile Profile[] @relation("Category")

    @@map("category")
}

model CategoryGroup {
    id   String @id @default(uuid())
    name String @unique

    profile Profile[] @relation("CategoryGroup")

    @@map("category_group")
}

model Promotion {
    id          String  @id @default(uuid())
    title       String
    description String?

    profile   Profile @relation(fields: [profileId], references: [id])
    profileId String  @unique

    @@map("promotion")
}

model Telephone {
    id        String   @id @default(uuid())
    telephone String[]
    whatsapp  String[]

    profile   Profile @relation(fields: [profileId], references: [id])
    profileId String  @unique

    @@map("telephone")
}

model Profile {
    id           String   @id @default(uuid())
    name         String
    informations String?
    movie        String?
    resume       String?
    createdAt    DateTime @default(now()) @db.Date

    address           Address?
    picture           Picture?
    promotion         Promotion?
    telephone         Telephone?
    categoryGroup     CategoryGroup[]    @relation("CategoryGroup")
    category          Category[]         @relation("Category")
    homePagePromotion HomePagePromotion?

    @@map("profile")
}
